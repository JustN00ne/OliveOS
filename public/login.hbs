<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OliveOS</title>

    <link rel="stylesheet" href="/assets/css/index.css">
    <link rel="stylesheet" href="/assets/css/login.css">

    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>

    <link rel="icon" href="/assets/image/fav/logo.svg" type="image/x-icon" media="(prefers-color-scheme: dark)">
    <link rel="icon" href="/assets/image/fav/logo-d.svg" type="image/x-icon" media="(prefers-color-scheme: light)">

    <meta name="theme-color" content="#ffffff">
    <meta name="description" content="OliveOS - A modern web operating system experience.">
    <meta name="keywords" content="OliveOS, Olive, OS, WebOS">
    <meta name="author" content="JustNoone">
</head><body>
    
    <div class="background_container">
        <img src="{{background_image_main}}" alt="background_img_main" id="background_img_main">
    </div>

    <div class="login_screen_b2" style="position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:1000;pointer-events:none;opacity:0;transition:opacity 0.3s;">

        <form class="inner_container_top login_new" id="login_screen_form" method="POST" action="/api/auth/login"> 
            <div class="inner_c_wr">
            <h1 class="login_title">Add a new account</h1>
            <p class="login_subtitle">Log in to your account</p>
            <input type="text" name="email" id="login_email" class="login_input" placeholder="Email" autocomplete="email">
            <input type="password" name="password" id="login_password" class="login_input" placeholder="Password" autocomplete="current-password">
            <button class="login_button" id="login_button" type="submit">Log in</button>
            </div>
        </form>

        <!-- CORRECTED ACTION ATTRIBUTE BASED ON FILE STRUCTURE -->
        <form class="inner_container_top register_new" id="register_screen_form" method="POST" action="/api/auth/register" style="display: none;">
            <div class="inner_c_wr">
            <h1 class="login_title">Create an account</h1>
            <p class="login_subtitle">Register a new account</p>
            <input type="text" name="reg_email" id="register_email" class="login_input" placeholder="Email" autocomplete="email">
            <input type="password" name="reg_password" id="register_password" class="login_input" placeholder="Password" autocomplete="new-password">
            <button class="login_button" id="register_button" type="submit">Register</button>
            <div class="divider_signin"></div>
            <div class="quicksignup_container">
                <button class="quick_signup_button qsb_g" id="google_signup_button" type="button">
                    <svg version="1.1" viewBox="0 0 268.1522 273.8827" overflow="hidden" xml:space="preserve" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" width="22" height="22">
                    <defs>
                        <linearGradient id="a"><stop offset="0" stop-color="#0fbc5c"/><stop offset="1" stop-color="#0cba65"/></linearGradient>
                        <linearGradient id="g"><stop offset=".2312727" stop-color="#0fbc5f"/><stop offset=".3115468" stop-color="#0fbc5f"/><stop offset=".3660131" stop-color="#0fbc5e"/><stop offset=".4575163" stop-color="#0fbc5d"/><stop offset=".540305" stop-color="#12bc58"/><stop offset=".6993464" stop-color="#28bf3c"/><stop offset=".7712418" stop-color="#38c02b"/><stop offset=".8605665" stop-color="#52c218"/><stop offset=".9150327" stop-color="#67c30f"/><stop offset="1" stop-color="#86c504"/></linearGradient>
                        <linearGradient id="h"><stop offset=".1416122" stop-color="#1abd4d"/><stop offset=".2475151" stop-color="#6ec30d"/><stop offset=".3115468" stop-color="#8ac502"/><stop offset=".3660131" stop-color="#a2c600"/><stop offset=".4456735" stop-color="#c8c903"/><stop offset=".540305" stop-color="#ebcb03"/><stop offset=".6156363" stop-color="#f7cd07"/><stop offset=".6993454" stop-color="#fdcd04"/><stop offset=".7712418" stop-color="#fdce05"/><stop offset=".8605661" stop-color="#ffce0a"/></linearGradient>
                        <linearGradient id="f"><stop offset=".3159041" stop-color="#ff4c3c"/><stop offset=".6038179" stop-color="#ff692c"/><stop offset=".7268366" stop-color="#ff7825"/><stop offset=".884534" stop-color="#ff8d1b"/><stop offset="1" stop-color="#ff9f13"/></linearGradient>
                        <linearGradient id="b"><stop offset=".2312727" stop-color="#ff4541"/><stop offset=".3115468" stop-color="#ff4540"/><stop offset=".4575163" stop-color="#ff4640"/><stop offset=".540305" stop-color="#ff473f"/><stop offset=".6993464" stop-color="#ff5138"/><stop offset=".7712418" stop-color="#ff5b33"/><stop offset=".8605665" stop-color="#ff6c29"/><stop offset="1" stop-color="#ff8c18"/></linearGradient>
                        <linearGradient id="d"><stop offset=".4084578" stop-color="#fb4e5a"/><stop offset="1" stop-color="#ff4540"/></linearGradient>
                        <linearGradient id="c"><stop offset=".1315461" stop-color="#0cba65"/><stop offset=".2097843" stop-color="#0bb86d"/><stop offset=".2972969" stop-color="#09b479"/><stop offset=".3962575" stop-color="#08ad93"/><stop offset=".4771242" stop-color="#0aa6a9"/><stop offset=".5684245" stop-color="#0d9cc6"/><stop offset=".667385" stop-color="#1893dd"/><stop offset=".7687273" stop-color="#258bf1"/><stop offset=".8585063" stop-color="#3086ff"/></linearGradient>
                        <linearGradient id="e"><stop offset=".3660131" stop-color="#ff4e3a"/><stop offset=".4575163" stop-color="#ff8a1b"/><stop offset=".540305" stop-color="#ffa312"/><stop offset=".6156363" stop-color="#ffb60c"/><stop offset=".7712418" stop-color="#ffcd0a"/><stop offset=".8605665" stop-color="#fecf0a"/><stop offset=".9150327" stop-color="#fecf08"/><stop offset="1" stop-color="#fdcd01"/></linearGradient>
                        <linearGradient xlink:href="#a" id="s" x1="219.6997" y1="329.5351" x2="254.4673" y2="329.5351" gradientUnits="userSpaceOnUse"/>
                        <radialGradient xlink:href="#b" id="m" gradientUnits="userSpaceOnUse" gradientTransform="matrix(-1.936885,1.043001,1.455731,2.555422,290.5254,-400.6338)" cx="109.6267" cy="135.8619" fx="109.6267" fy="135.8619" r="71.46001"/>
                        <radialGradient xlink:href="#c" id="n" gradientUnits="userSpaceOnUse" gradientTransform="matrix(-3.512595,-4.45809,-1.692547,1.260616,870.8006,191.554)" cx="45.25866" cy="279.2738" fx="45.25866" fy="279.2738" r="71.46001"/>
                        <radialGradient xlink:href="#d" id="l" cx="304.0166" cy="118.0089" fx="304.0166" fy="118.0089" r="47.85445" gradientTransform="matrix(2.064353,-4.926832e-6,-2.901531e-6,2.592041,-297.6788,-151.7469)" gradientUnits="userSpaceOnUse"/>
                        <radialGradient xlink:href="#e" id="o" gradientUnits="userSpaceOnUse" gradientTransform="matrix(-0.2485783,2.083138,2.962486,0.3341668,-255.1463,-331.1636)" cx="181.001" cy="177.2013" fx="181.001" fy="177.2013" r="71.46001"/>
                        <radialGradient xlink:href="#f" id="p" cx="207.6733" cy="108.0972" fx="207.6733" fy="108.0972" r="41.1025" gradientTransform="matrix(-1.249206,1.343263,-3.896837,-3.425693,880.5011,194.9051)" gradientUnits="userSpaceOnUse"/>
                        <radialGradient xlink:href="#g" id="r" gradientUnits="userSpaceOnUse" gradientTransform="matrix(-1.936885,-1.043001,1.455731,-2.555422,290.5254,838.6834)" cx="109.6267" cy="135.8619" fx="109.6267" fy="135.8619" r="71.46001"/>
                        <radialGradient xlink:href="#h" id="j" gradientUnits="userSpaceOnUse" gradientTransform="matrix(-0.081402,-1.93722,2.926737,-0.1162508,-215.1345,632.8606)" cx="154.8697" cy="145.9691" fx="154.8697" fy="145.9691" r="71.46001"/>
                        <filter id="q" x="-.04842873" y="-.0582241" width="1.096857" height="1.116448" color-interpolation-filters="sRGB"><feGaussianBlur stdDeviation="1.700914"/></filter>
                        <filter id="k" x="-.01670084" y="-.01009856" width="1.033402" height="1.020197" color-interpolation-filters="sRGB"><feGaussianBlur stdDeviation=".2419367"/></filter>
                        <clipPath clipPathUnits="userSpaceOnUse" id="i"><path d="M371.3784 193.2406H237.0825v53.4375h77.167c-1.2405 7.5627-4.0259 15.0024-8.1049 21.7862-4.6734 7.7723-10.4511 13.6895-16.373 18.1957-17.7389 13.4983-38.42 16.2584-52.7828 16.2584-36.2824 0-67.2833-23.2865-79.2844-54.9287-.4843-1.1482-.8059-2.3344-1.1975-3.5068-2.652-8.0533-4.101-16.5825-4.101-25.4474 0-9.226 1.5691-18.0575 4.4301-26.3985 11.2851-32.8967 42.9849-57.4674 80.1789-57.4674 7.4811 0 14.6854.8843 21.5173 2.6481 15.6135 4.0309 26.6578 11.9698 33.4252 18.2494l40.834-39.7111c-24.839-22.616-57.2194-36.3201-95.8444-36.3201-30.8782-.00066-59.3863 9.55308-82.7477 25.6992-18.9454 13.0941-34.4833 30.6254-44.9695 50.9861-9.75366 18.8785-15.09441 39.7994-15.09441 62.2934 0 22.495 5.34891 43.6334 15.10261 62.3374v.126c10.3023 19.8567 25.3678 36.9537 43.6783 49.9878 15.9962 11.3866 44.6789 26.5516 84.0307 26.5516 22.6301 0 42.6867-4.0517 60.3748-11.6447 12.76-5.4775 24.0655-12.6217 34.3012-21.8036 13.5247-12.1323 24.1168-27.1388 31.3465-44.4041 7.2297-17.2654 11.097-36.7895 11.097-57.957 0-9.858-.9971-19.8694-2.6881-28.9684Z" fill="#000"/></clipPath>
                    </defs>
                    <g transform="matrix(0.957922,0,0,0.985255,-90.17436,-78.85577)">
                        <g clip-path="url(#i)"><path d="M92.07563 219.9585c.14844 22.14 6.5014 44.983 16.11767 63.4234v.1269c6.9482 13.3919 16.4444 23.9704 27.2604 34.4518l65.326-23.67c-12.3593-6.2344-14.2452-10.0546-23.1048-17.0253-9.0537-9.0658-15.8015-19.4735-20.0038-31.677h-.1693l.1693-.1269c-2.7646-8.0587-3.0373-16.6129-3.1393-25.5029Z" fill="url(#j)" filter="url(#k)"/><path d="M237.0835 79.02491c-6.4568 22.52569-3.988 44.42139 0 57.16129 7.4561.0055 14.6388.8881 21.4494 2.6464 15.6135 4.0309 26.6566 11.97 33.424 18.2496l41.8794-40.7256c-24.8094-22.58904-54.6663-37.2961-96.7528-37.33169Z" fill="url(#l)" filter="url(#k)"/><path d="M236.9434 78.84678c-31.6709-.00068-60.9107 9.79833-84.8718 26.35902-8.8968 6.149-17.0612 13.2521-24.3311 21.1509-1.9045 17.7429 14.2569 39.5507 46.2615 39.3702 15.5284-17.9373 38.4946-29.5427 64.0561-29.5427.0233 0 .046.0019.0693.002l-1.0439-57.33536c-.0472-.00003-.0929-.00406-.1401-.00406Z" fill="url(#m)" filter="url(#k)"/><path d="m341.4751 226.3788-28.2685 19.2848c-1.2405 7.5627-4.0278 15.0023-8.1068 21.7861-4.6734 7.7723-10.4506 13.6898-16.3725 18.196-17.7022 13.4704-38.3286 16.2439-52.6877 16.2553-14.8415 25.1018-17.4435 37.6749 1.0439 57.9342 22.8762-.0167 43.157-4.1174 61.0458-11.7965 12.9312-5.551 24.3879-12.7913 34.7609-22.0964 13.7061-12.295 24.4421-27.5034 31.7688-45.0003 7.3267-17.497 11.2446-37.2822 11.2446-58.7336Z" fill="url(#n)" filter="url(#k)"/><path d="M234.9956 191.2104v57.4981h136.0062c1.1962-7.8745 5.1523-18.0644 5.1523-26.5001 0-9.858-.9963-21.899-2.6873-30.998Z" fill="#3086ff" filter="url(#k)"/><path d="M128.3894 124.3268c-8.393 9.1191-15.5632 19.326-21.2483 30.3646-9.75351 18.8785-15.09402 41.8295-15.09402 64.3235 0 .317.02642.6271.02855.9436 4.31953 8.2244 59.66647 6.6495 62.45617 0-.0035-.3103-.0387-.6128-.0387-.9238 0-9.226 1.5696-16.0262 4.4306-24.3672 3.5294-10.2885 9.0557-19.7628 16.1223-27.9257 1.6019-2.0309 5.8748-6.3969 7.1214-9.0157.4749-.9975-.8621-1.5574-.9369-1.9085-.0836-.3927-1.8762-.0769-2.2778-.3694-1.2751-.9288-3.8001-1.4138-5.3334-1.8449-3.2772-.9215-8.7085-2.9536-11.7252-5.0601-9.5357-6.6586-24.417-14.6122-33.5047-24.2164Z" fill="url(#o)" filter="url(#k)"/><path d="M162.0989 155.8569c22.1123 13.3013 28.4714-6.7139 43.173-12.9771L179.698 90.21568c-9.4075 3.92642-18.2957 8.80465-26.5426 14.50442-12.316 8.5122-23.192 18.8995-32.1763 30.7204Z" fill="url(#p)" filter="url(#q)"/><path d="M171.0987 290.222c-29.6829 10.6413-34.3299 11.023-37.0622 29.2903 5.2213 5.0597 10.8312 9.74 16.7926 13.9835 15.9962 11.3867 46.766 26.5517 86.1178 26.5517.0462 0 .0904-.004.1366-.004v-59.1574c-.0298.0001-.064.002-.0938.002-14.7359 0-26.5113-3.8435-38.5848-10.5273-2.9768-1.6479-8.3775 2.7772-11.1229.799-3.7865-2.7284-12.8991 2.3508-16.1833-.9378Z" fill="url(#r)" filter="url(#k)"/><path d="M219.6997 299.0227v59.9959c5.506.6402 11.2361 1.0289 17.2472 1.0289 6.0259 0 11.8556-.3073 17.5204-.8723v-59.7481c-6.3482 1.0777-12.3272 1.461-17.4776 1.461-5.9318 0-11.7005-.6858-17.29-1.8654Z" opacity=".5" fill="url(#s)" filter="url(#k)"/></g></g>
                    </svg>
                </button>
                <button class="quick_signup_button qsb_d" id="discord_signup_button" type="button">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M21.9705 6.4921C20.5045 5.80147 18.9325 5.29265 17.2889 5.00122C17.259 4.9956 17.2291 5.00965 17.2137 5.03777C17.0115 5.40697 16.7875 5.88862 16.6307 6.26719C14.8629 5.99545 13.1041 5.99545 11.3726 6.26719C11.2157 5.8802 10.9836 5.40697 10.7806 5.03777C10.7651 5.01059 10.7352 4.99654 10.7053 5.00122C9.06258 5.29172 7.49058 5.80054 6.02373 6.4921C6.01103 6.49772 6.00015 6.5071 5.99292 6.51928C3.01117 11.0931 2.19434 15.5545 2.59505 19.9606C2.59686 19.9822 2.60865 20.0028 2.62496 20.0159C4.59224 21.4993 6.49789 22.3998 8.36814 22.9967C8.39807 23.0061 8.42979 22.9949 8.44884 22.9695C8.89125 22.3492 9.28562 21.6952 9.62375 21.0073C9.6437 20.967 9.62466 20.9192 9.58387 20.9033C8.95834 20.6597 8.3627 20.3626 7.78974 20.0253C7.74442 19.9981 7.74079 19.9316 7.78248 19.8997C7.90306 19.8069 8.02366 19.7104 8.13879 19.613C8.15962 19.5952 8.18865 19.5914 8.21314 19.6026C11.9772 21.3672 16.0523 21.3672 19.772 19.6026C19.7965 19.5905 19.8255 19.5942 19.8472 19.612C19.9624 19.7095 20.083 19.8069 20.2045 19.8997C20.2462 19.9316 20.2434 19.9981 20.1981 20.0253C19.6252 20.3692 19.0295 20.6597 18.4031 20.9024C18.3623 20.9183 18.3442 20.967 18.3641 21.0073C18.7095 21.6942 19.1039 22.3483 19.5381 22.9686C19.5563 22.9949 19.5889 23.0061 19.6188 22.9967C21.4981 22.3998 23.4038 21.4993 25.371 20.0159C25.3883 20.0028 25.3992 19.9831 25.401 19.9616C25.8805 14.8676 24.5977 10.4428 22.0004 6.52021C21.994 6.5071 21.9832 6.49772 21.9705 6.4921ZM10.1859 17.2778C9.0526 17.2778 8.11884 16.2095 8.11884 14.8976C8.11884 13.5857 9.03449 12.5175 10.1859 12.5175C11.3463 12.5175 12.271 13.5951 12.2528 14.8976C12.2528 16.2095 11.3372 17.2778 10.1859 17.2778ZM17.8283 17.2778C16.6951 17.2778 15.7613 16.2095 15.7613 14.8976C15.7613 13.5857 16.6769 12.5175 17.8283 12.5175C18.9887 12.5175 19.9134 13.5951 19.8953 14.8976C19.8953 16.2095 18.9887 17.2778 17.8283 17.2778Z" fill="white"/></svg>
                </button>
            </div>
            </div>
        </form>

        <div class="inner_container">
            <div class="inner_container_squared">
            <a id="change_accounts_btn">Change Accounts</a>
            <div class="inc_divider"></div>
            <a id="make_account_btn">Make an account</a>
            </div>
        </div>
    </div>


    <div id="login_screen_m" class="login_screen_m" style="position:relative;z-index:1001;">
        <div class="left_s">
            <span id="date_currently" class="hb date">01.01.2025</span>
            <span id="time_currently" class="hb time">12:34:56</span>
        </div>
        <div class="right_s">
            <div id="user_info_section" style="display:none; flex-direction: row; align-items: flex-end; gap: 20px;">
                <div class="login_rs">
                    <img id="user_profile_img" src="" alt="pfp" class="login_logo">
                </div>
                <div class="login_d">
                    <p class="logindata name" id="user_name_text"></p>
                    <p class="logindata email" id="user_email_text"></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const loginScreen = document.getElementById('login_screen_m');
        const loginScreenB2 = document.querySelector('.login_screen_b2');
        const loginForm = document.getElementById('login_screen_form');
        const registerForm = document.getElementById('register_screen_form');
        const makeAccountBtn = document.getElementById('make_account_btn');
        const changeAccountsBtn = document.getElementById('change_accounts_btn');
        
        if (loginScreenB2) loginScreenB2.style.opacity = 0;
        if (loginForm) loginForm.style.display = 'flex';
        if (registerForm) registerForm.style.display = 'none';

        if (makeAccountBtn) makeAccountBtn.onclick = function() {
            if (!loginForm || !registerForm) return;
            loginForm.style.transition = 'opacity 0.3s';
            loginForm.style.opacity = 0;
            setTimeout(() => {
                loginForm.style.display = 'none';
                registerForm.style.display = 'flex';
                registerForm.style.opacity = 0;
                registerForm.style.transition = 'opacity 0.3s';
                setTimeout(() => { registerForm.style.opacity = 1; }, 10);
            }, 300);
        };

        if (changeAccountsBtn) changeAccountsBtn.onclick = function() {
            if (!loginForm || !registerForm) return;
            registerForm.style.transition = 'opacity 0.3s';
            registerForm.style.opacity = 0;
            setTimeout(() => {
                registerForm.style.display = 'none';
                loginForm.style.display = 'flex';
                loginForm.style.opacity = 0;
                loginForm.style.transition = 'opacity 0.3s';
                setTimeout(() => { loginForm.style.opacity = 1; }, 10);
            }, 300);
        };

        let isDragging = false, isSnapped = false, startY, currentTranslateY = 0;
        const topMargin = 50;
        const maxDragDistance = loginScreen.offsetHeight + topMargin;
        const releaseThreshold = maxDragDistance * 0.25;
        const forceSnapThreshold = maxDragDistance * 0.50;
        
        loginScreen.addEventListener('mousedown', dragStart);
        loginScreen.addEventListener('touchstart', dragStart, { passive: false });
        window.addEventListener('mousemove', dragging);
        window.addEventListener('touchmove', dragging, { passive: false });
        window.addEventListener('mouseup', dragEnd);
        window.addEventListener('touchend', dragEnd);
        
        window.addEventListener('keydown', function() {
            if (!isSnapped) {
                isSnapped = true;
                loginScreen.style.transition = 'transform 0.4s ease-in-out, opacity 0.4s ease-in-out';
                loginScreen.style.transform = `translateY(-${maxDragDistance}px)`;
                loginScreen.style.opacity = 0;
                if (loginScreenB2) {
                    loginScreenB2.style.display = 'block';
                    loginScreenB2.style.pointerEvents = 'auto';
                    loginScreenB2.style.transition = 'opacity 0.3s cubic-bezier(0.4,0,0.2,1)';
                    loginScreenB2.style.opacity = 1;
                }
            }
        });

        function dragStart(e) {
            startY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;
            isDragging = true; isSnapped = false;
            loginScreen.style.transition = 'none';
        }

        function dragging(e) {
            if (!isDragging || isSnapped) return;
            e.preventDefault();
            const currentY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;
            const deltaY = currentY - startY;
            currentTranslateY = Math.min(0, Math.max(-maxDragDistance, deltaY));
            const dragProgress = -currentTranslateY / maxDragDistance;
            loginScreen.style.transform = `translateY(${currentTranslateY}px)`;
            loginScreen.style.opacity = 1 - dragProgress;
            if (loginScreenB2) {
                if (dragProgress >= 0.45) {
                    loginScreenB2.style.display = 'block';
                    loginScreenB2.style.pointerEvents = 'auto';
                    loginScreenB2.style.transition = 'opacity 0.3s cubic-bezier(0.4,0,0.2,1)';
                } else {
                    loginScreenB2.style.pointerEvents = 'none';
                    loginScreenB2.style.transition = 'none';
                }
                loginScreenB2.style.opacity = dragProgress;
            }
            if (-currentTranslateY >= forceSnapThreshold) { isSnapped = true; snapUp(); }
        }

        function dragEnd(e) {
            if (!isDragging || isSnapped) return;
            isDragging = false;
            (-currentTranslateY > releaseThreshold) ? snapUp() : snapDown();
        }

        function snapUp() {
            loginScreen.style.transform = `translateY(-${maxDragDistance}px)`;
            loginScreen.style.opacity = 0; isDragging = false;
            if (loginScreenB2) {
                loginScreenB2.style.display = 'block';
                loginScreenB2.style.pointerEvents = 'auto';
                loginScreenB2.style.opacity = 1;
                loginScreenB2.style.transition = 'opacity 0.3s cubic-bezier(0.4,0,0.2,1)';
            }
        }

        function snapDown() {
            loginScreen.style.transform = 'translateY(0px)';
            loginScreen.style.opacity = 1;
            if (loginScreenB2) {
                loginScreenB2.style.pointerEvents = 'none';
                loginScreenB2.style.opacity = 0;
                loginScreenB2.style.transition = 'none';
            }
        }
    </script>
    <script>
    document.getElementById('login_screen_form').addEventListener('submit', async function(e) {
        e.preventDefault();
        const email = document.getElementById('login_email').value;
        const password = document.getElementById('login_password').value;
        const res = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });
        if (res.ok) {
            let data = {};
            try { data = await res.json(); } catch {}
            if (data && (data.user || data.success)) {
                localStorage.setItem('supabase_registered', 'true');
                if (data.user) {
                    localStorage.setItem('supabase_user_profile', data.user.profile_url || '');
                    localStorage.setItem('supabase_user_name', data.user.name || '');
                    localStorage.setItem('supabase_user_email', data.user.email || email);
                }
            }
            window.location.href = '/';
        } else {
            let data;
            try { data = await res.json(); } catch { data = { error: 'Unknown error' }; }
            console.error('Login failed:', data.error);
            alert('Login failed: ' + data.error);
        }
    });

    document.getElementById('register_screen_form').addEventListener('submit', async function(e) {
        e.preventDefault();
        const email = document.getElementById('register_email').value;
        const password = document.getElementById('register_password').value;
        
        // This fetch URL MUST match the server route
        const res = await fetch('/api/auth/register', { 
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });
        if (res.ok) {
            let data = {};
            try { data = await res.json(); } catch {}
            if (data && (data.user || data.success)) {
                localStorage.setItem('supabase_registered', 'true');
                if (data.user) {
                    localStorage.setItem('supabase_user_email', data.user.email || email);
                }
            }
            window.location.href = '/';
        } else {
            let data;
            try { data = await res.json(); } catch { data = { error: 'Unknown error' }; }
            alert('Registration failed: ' + data.error);
        }
    });

    document.getElementById('google_signup_button').addEventListener('click', () => window.location.href = '/api/register/google');
    document.getElementById('discord_signup_button').addEventListener('click', () => window.location.href = '/api/register/discord');
    </script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const userInfoSection = document.getElementById('user_info_section');
        const loginEmailInput = document.getElementById('login_email');

        if (localStorage.getItem('supabase_registered') === 'true') {
            if (userInfoSection) userInfoSection.style.display = 'flex';

            const profile = localStorage.getItem('supabase_user_profile') || '/assets/image/default/pfp.png';
            const name = localStorage.getItem('supabase_user_name') || 'User';
            const email = localStorage.getItem('supabase_user_email') || '';

            const profileImg = document.getElementById('user_profile_img');
            const nameText = document.getElementById('user_name_text');
            const emailText = document.getElementById('user_email_text');

            if (profileImg) profileImg.src = profile;
            if (nameText) nameText.textContent = name;
            if (emailText) emailText.textContent = email;

            if (loginEmailInput) {
                loginEmailInput.value = email;
                loginEmailInput.style.display = 'none';
            }

        } else {
            if (userInfoSection) userInfoSection.style.display = 'none';
            if (loginEmailInput) loginEmailInput.style.display = 'flex';
        }
    });
    </script>
    <script>
      window.SUPABASE_URL = '{{SUPABASE_URL}}';
      window.SUPABASE_ANON_KEY = '{{SUPABASE_ANON_KEY}}';
    </script>
    <script type="module">
      import { supabase } from '/assets/js/supabaseClient.js';
      // Listen for OAuth sign-in
      supabase.auth.onAuthStateChange(async (event, session) => {
        if (event === 'SIGNED_IN' && session) {
          // Send session to backend to set cookie
          await fetch('/api/auth/set-session', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ session })
          });
          // Redirect to home
          window.location.href = '/';
        }
      });
    </script>
    <script>
      // Clock and date updater
      function updateClockAndDate() {
        const now = new Date();
        const dateElem = document.getElementById('date_currently');
        const timeElem = document.getElementById('time_currently');
        if (dateElem) {
          // Format: DD.MM.YYYY
          const day = String(now.getDate()).padStart(2, '0');
          const month = String(now.getMonth() + 1).padStart(2, '0');
          const year = now.getFullYear();
          dateElem.textContent = `${day}.${month}.${year}`;
        }
        if (timeElem) {
          // Format: HH:MM:SS
          const hours = String(now.getHours()).padStart(2, '0');
          const minutes = String(now.getMinutes()).padStart(2, '0');
          const seconds = String(now.getSeconds()).padStart(2, '0');
          timeElem.textContent = `${hours}:${minutes}:${seconds}`;
        }
      }
      setInterval(updateClockAndDate, 1000);
      updateClockAndDate();
    </script>
</body>
</html>